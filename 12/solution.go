package main

/*
PROBLEM

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

import (
  "fmt"
  "math"
)

func sq(num int) int {
  return int(math.Ceil(math.Sqrt(float64(num))))
}


func divisors(n int) []int {
  factors := make([]int, 0)
  limt := sq(n)
  for i := 1; i < limt; i++ {
    if n % i == 0 {
      factors = append(factors, i, n / i)
    }
  }
  return factors
}

func triangular(i int) int {
  return (1 + i)*i/2
}

func main() {
  i := 1
  for {
    t := triangular(i)
    f := divisors(t)
    fmt.Printf("i: %d, t: %d, d: %d\n", i, t, len(f))
    if (len(f) > 500) {
      break;
    }
    i++
  }
}
